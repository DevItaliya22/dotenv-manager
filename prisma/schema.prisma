// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Local auth
  passwordHash  String?

  accounts      Account[]
  sessions      Session[]
  repos         Repo[]
  envVars       EnvVar[]
  shareLinks    ShareLink[] @relation("OwnerShareLinks")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Only required if using email-provider; kept for adapter compatibility
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repo {
  id            String   @id @default(cuid())
  ownerId       String
  // GitHub repository identification
  githubId      BigInt?  @unique
  fullName      String   @unique // e.g., owner/name
  name          String
  provider      String   @default("github")

  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  envVars       EnvVar[]
  shareLinks    ShareLink[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([ownerId])
  @@index([fullName])
}

model EnvVar {
  id         String   @id @default(cuid())
  ownerId    String
  repoId     String?
  key        String
  value      String
  // Optional link to docs or reference for this env var
  link       String?

  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  repo       Repo?    @relation(fields: [repoId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([ownerId])
  @@index([repoId])
  @@unique([ownerId, repoId, key])
}

model ShareLink {
  id           String   @id @default(cuid())
  token        String   @unique
  ownerId      String
  // If null, this share link is for global envs
  repoId       String?
  // Optional name/label for the shared set
  name         String?
  // Expiration time; after this, link becomes invalid
  expiresAt    DateTime

  owner        User     @relation(name: "OwnerShareLinks", fields: [ownerId], references: [id], onDelete: Cascade)
  repo         Repo?    @relation(fields: [repoId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())

  @@index([ownerId])
  @@index([repoId])
}
